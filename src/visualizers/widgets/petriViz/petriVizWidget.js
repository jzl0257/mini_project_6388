/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sat Dec 03 2022 21:09:09 GMT+0000 (Coordinated Universal Time).
 */

define(["jointjs", "css!./styles/petriVizWidget.css"], function (joint) {
  "use strict";
  var WIDGET_CLASS = "petri-viz";
  function petriVizWidget(logger, container) {
    this._logger = logger.fork("Widget");
    this._el = container;
    this.nodes = {};
    this._initialize();
    this._logger.debug("ctor finished");
  }

  petriVizWidget.prototype._initialize = function () {
    joint.shapes.pn.Place = joint.shapes.basic.Generic.define(
      "pn.Place",
      {
        size: { width: 70, height: 70 },
        attrs: {
          ".root": {
            r: 25,
            fill: "#ffffff",
            stroke: "#000000",
          },
          ".label": {
            "text-anchor": "middle",
            "ref-x": 0.5,
            "ref-y": 90,
            ref: ".root",
            fill: "#000000",
            "font-size": 16,
          },

          ".tokens.alot > text": {
            "text-anchor": "middle",
            fill: "#f30404",
          },
        },
      },
      {
        markup:
          '<g class="rotatable"><g class="scalable"><circle class="root"/><g class="tokens" /></g><text class="label"/></g>',
      }
    );

    joint.shapes.pn.PlaceView = joint.dia.ElementView.extend({
      //update the tokens number
      presentationAttributes: joint.dia.ElementView.addPresentationAttributes({
        tokens: ["TOKENS"],
      }),
      initFlag: joint.dia.ElementView.prototype.initFlag.concat(["TOKENS"]),

      confirmUpdate: function (...args) {
        let flags = joint.dia.ElementView.prototype.confirmUpdate.call(
          this,
          ...args
        );
        if (this.hasFlag(flags, "TOKENS")) {
          this.renderTokens();
          this.update();
          flags = this.removeFlag(flags, "TOKENS");
        }
        return flags;
      },

      renderTokens: function () {
        const vTokens = this.vel.findOne(".tokens").empty();
        vTokens.addClass("alot");
        var tokens = this.model.get("tokens");
        vTokens.append(joint.V("text").text(`${tokens}`));
      },
    });

    joint.shapes.pn.TransitionView = joint.dia.ElementView.extend({
      //update the status
      presentationAttributes: joint.dia.ElementView.addPresentationAttributes({
        enabled: ["ENABLED"],
      }),
      initFlag: joint.dia.ElementView.prototype.initFlag.concat(["ENABLED"]),

      confirmUpdate: function (...args) {
        let flags = joint.dia.ElementView.prototype.confirmUpdate.call(
          this,
          ...args
        );
        if (this.hasFlag(flags, "ENABLED")) {
          this.renderStatus();
          this.update();
          flags = this.removeFlag(flags, "ENABLED");
        }
        return flags;
      },
      renderStatus: function () {
        let ENABLED_CLASS = "switch_color";
        let root = this.vel.findOne(".root");
        let label = this.vel.findOne(".label");
        let transitionName = this.model.get("name");
        var enabled = this.model.get("enabled");
          if (enabled) {
            label
              .text(`Active ${transitionName}`)
              .addClass("enabled")
              .removeClass("disabled");
            root.addClass(ENABLED_CLASS);
          } else {
            label
              .text(`Inactive ${transitionName}`)
              .removeClass("enabled")
              .addClass("disabled");
            root.removeClass(ENABLED_CLASS);
          }
      },
    });

    var width = this._el.width(),
      height = this._el.height(),
      self = this;


    self._el.addClass(WIDGET_CLASS);
    const namespace = joint.shapes;

    self._jointPetriNet = new joint.dia.Graph({}, { cellNamespace: namespace });
    self._jointPaper = new joint.dia.Paper({
      el: self._el,
      width: width,
      height: height,
      gridSize: 20,
      model: self._jointPetriNet,
      defaultAnchor: { name: "perpendicular" },
      defaultConnectionPoint: { name: "boundary" },
      cellViewNamespace: namespace,
    });

    self._el.on("dblclick", function (event) {
      event.stopPropagation();
      event.preventDefault();
      self.onBackgroundDblClick();
    });

    this._svgD3 = d3.select(this._el[0]).append('svg')
            .attr('width', width)
            .attr('height', height);
  };

    petriVizWidget.prototype.initializePlaceVertices = function () {
    let self = this;
    self._webgmePetriNet.setPlaceID = {
    };
    Object.keys(self._webgmePetriNet.places).forEach((placeId) => {
      let place = self._webgmePetriNet.places[placeId];
      let vertex = new joint.shapes.pn.Place({
        position: place.position,
        size: { width: 80, height: 80 },
        attrs: {
          ".label": {
            text: 'Place ' + self._webgmePetriNet.places[placeId].id,
            fill: "black",
            "text-anchor": "middle",
            "ref-x": 0.5,
            "ref-y": 90,
            ref: ".root",
            "font-size": 16,
          },
          ".root": {
            stroke: "black",
            strokeWidth: 3,
          },
        },
        tokens: place.token_num,
      });
      self._jointPetriNet.addCell([vertex]);
      self._webgmePetriNet.places[placeId].joint = vertex;
      self._webgmePetriNet.setPlaceID[vertex.id] = placeId;
    });
  };

  petriVizWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
    if (this._jointPaper) {
            this._jointPaper.setDimensions(width,height);
            this._jointPaper.scale(0.8,0.8);
            // V(this._jointPaper).scale()

    }
    this._svgD3
            .attr('width', width)
            .attr('height', height);

  };


    // PetriVizWidge.prototype.onMouseWheel = function (e) {
    //   //function onMouseWheel(e){
    //   e.preventDefault();
    //   e = e.originalEvent;
    //
    //   var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail))) / 50;
    //   var offsetX = (e.offsetX || e.clientX - $(this).offset().left);
    //
    //   var offsetY = (e.offsetY || e.clientY - $(this).offset().top);
    //   var p = offsetToLocalPoint(offsetX, offsetY);
    //   var newScale = V(paper.viewport).scale().sx + delta;
    //   console.log(' delta' + delta + ' ' + 'offsetX' + offsetX + 'offsety--' + offsetY + 'p' + p.x + 'newScale' + newScale)
    //   if (newScale > 0.4 && newScale < 2) {
    //     paper.setOrigin(0, 0);
    //     paper.scale(newScale, newScale, p.x, p.y);
    //   }
    // });
    //
    // PetriVizWidge.prototype.offsetToLocalPoint = function (x, y) {
    //   var svgPoint = paper.svg.createSVGPoint();
    //   svgPoint.x = x;
    //   svgPoint.y = y;
    //
    //   var pointTransformed = svgPoint.matrixTransform(paper.viewport.getCTM().inverse());
    //   return pointTransformed;
    // }


  petriVizWidget.prototype.addNode = function (desc) {
    this._headerEl.text('Current model may have changed.');
  };

  petriVizWidget.prototype.removeNode = function (gmeId) {
    var desc = this.nodes[gmeId];
    this._el.append('<div>Removing node "' + desc.name + '"</div>');
    delete this.nodes[gmeId];
  };

  petriVizWidget.prototype.updateNode = function (desc) {
    if (desc) {
      this._logger.debug("Updating node:", desc);
      this._el.append('<div>Updating node "' + desc.name + '"</div>');
    }
  };


    petriVizWidget.prototype.updateTransition_Status = function () {
    let self = this;
    let enabledTransitions = [];
    Object.keys(self._webgmePetriNet.transitions).forEach((transition_id) => {
      let transition = self._webgmePetriNet.transitions[transition_id];
      let fireable = transitionIsFireable(self, transition.joint);
      transition.joint.set("enabled", fireable);
      if (fireable) {
        enabledTransitions.push(transition);
      }
    });
    self._webgmePetriNet.setEvent(enabledTransitions);
    if (enabledTransitions.length === 0 && !self.JUST_NOTIFIED_DEADLOCK) {
      self._client.notifyUser({
        message: "Deadlock",
        severity: "info",
      });
      self.JUST_NOTIFIED_DEADLOCK = true;
      setTimeout(() => {
        self.JUST_NOTIFIED_DEADLOCK = false;
      }, 5000);
    }
  };

  petriVizWidget.prototype.initializeTransitionVertices = function () {

    let self = this;
    self._webgmePetriNet.id2transition = {
    };
    Object.keys(self._webgmePetriNet.transitions).forEach((transitionId) => {
      let transition = self._webgmePetriNet.transitions[transitionId];
      let vertex = new joint.shapes.pn.Transition({
        name: transition.name,
        position: transition.position,
        size: { width: 50, height: 50 },
        attrs: {
          ".label": {
            text: transition.id,
            "text-anchor": "middle",
            "ref-x": 0.5,
            "ref-y": 60,
            ref: ".root",
            fontSize: 18,
          },
          ".label.disabled": {
            fill: "red",
            stroke: "red",
          },
          ".root": {
            fill: "red",
            stroke: "red",
          },
          ".root.switch_color": {
            stroke: "green",
            fill: "green",
          },
          ".label.id": {
            text: transition.id,
            "text-anchor": "middle",
            "ref-x": 0.5,
            "ref-y": 60,
            ref: ".label",
            fontSize: 18,
          },
          ".label.enabled": {
            fill: "green",
            stroke: "green",
          },
        },
      });
      vertex.addTo(self._jointPetriNet);
      self._webgmePetriNet.transitions[transitionId].joint = vertex;
      self._webgmePetriNet.id2transition[vertex.id] = transitionId;
    });
  };

  petriVizWidget.prototype.initializeArcs = function (arcType) {
    let self = this;
    let createJointLink = (a, b, name) => {
      return new joint.shapes.standard.Link({
        source: { id: a.id },
        target: { id: b.id },
        attrs: {
          line: {
            strokeWidth: 3,
          },
        },
        labels: [
          {
            position: {
              distance: 0.5,
              offset: 0,
            },
            attrs: {
              text: {
                text: name,
              },
            },
          },
        ],
      });
    };
    let arcsArray =
      arcType === "Arc_P_to_T"
        ? self._webgmePetriNet.Arc_P_to_T
        : self._webgmePetriNet.Arc_T_to_P;
    arcsArray.forEach((arc) => {
      let src =
        arcType === "Arc_P_to_T"
          ? self._webgmePetriNet.places[arc.src]
          : self._webgmePetriNet.transitions[arc.src];
      let dst =
        arcType === "Arc_P_to_T"
          ? self._webgmePetriNet.transitions[arc.dst]
          : self._webgmePetriNet.places[arc.dst];
      src.jointOutArcs = src.jointOutArcs || {};
      let link = createJointLink(src.joint, dst.joint, arc.name);
      link.addTo(self._jointPetriNet);
      src.jointOutArcs[arc.id] = link;
    });
  };

  petriVizWidget.prototype.initMachine = function (petriNetDescriptor) {
    const self = this;
    self._webgmePetriNet = petriNetDescriptor;
    self._jointPetriNet.clear();
    self.initializePlaceVertices();
    self.initializeTransitionVertices();
    ["Arc_P_to_T", "Arc_T_to_P"].forEach((arcType) => {
      self.initializeArcs(arcType);
    });
    self._jointPaper.updateViews();
    self._decorateMachine();
  };

  petriVizWidget.prototype.destroyMachine = function () {};

  let transitionIsFireable = (self, t, placesBefore = null) => {
    if (!placesBefore) {
      var inbound = self._jointPetriNet.getConnectedLinks(t, {
        inbound: true,
      });
      var placesBefore = inbound.map(function (link) {
        return link.getSourceElement();
      });
    }
    var runnable = true;
    placesBefore.forEach(function (p) {
      if (p.get("tokens") === 0) {
        runnable = false;
      }
    });
    return runnable;
  };

  petriVizWidget.prototype.runEvent = function (transition = null) {
    let self = this;

    let fireTransition = (t, sec, self) => {
      var inbound = self._jointPetriNet.getConnectedLinks(t, { inbound: true });
      var outbound = self._jointPetriNet.getConnectedLinks(t, {
        outbound: true,
      });
      var placesBefore = inbound.map(function (link) {
        return link.getSourceElement();
      });
      var placesAfter = outbound.map(function (link) {
        return link.getTargetElement();
      });

      if (transitionIsFireable(self, t, placesBefore)) {
        let TOKEN_COLOR = "#2fff00";
        let TOKEN_RADIUS = 5;
        placesBefore.forEach(function (p) {
          //change the num of tokens of each place
          setTimeout(function () {
            p.set("tokens", p.get("tokens") - 1);
          }, 0);

          var links = inbound.filter(function (l) {
            return l.getSourceElement() === p;
          });

          links.forEach(function (l) {
            var token = joint.V("circle", {
              r: TOKEN_RADIUS,
              fill: TOKEN_COLOR,
            });
            l.findView(self._jointPaper).sendToken(token, sec * 1000);
          });
        });

        placesAfter.forEach(function (p) {
          var links = outbound.filter(function (l) {
            return l.getTargetElement() === p;
          });

          links.forEach(function (l) {
            var token = joint.V("circle", {
              r: TOKEN_RADIUS,
              fill: TOKEN_COLOR,
            });
            l.findView(self._jointPaper).sendToken(
              token,
              sec * 1000,
              function () {
                p.set("tokens", p.get("tokens") + 1);
              }
            );
          });
        });
      }
    };

    let fireAllEnabledTransitions = (self) => {
      Object.keys(self._webgmePetriNet.transitions).forEach((i) => {
        fireTransition(self._webgmePetriNet.transitions[i].joint, 1, self);
      });
    };
    if (!transition) {
      fireAllEnabledTransitions(self);
    } else {
      fireTransition(transition.joint, 1, self);
    }
    setTimeout(() => {
      self._decorateMachine();
    }, 1100);
  };
  //initial the machine
  petriVizWidget.prototype.resetMachine = function () {
    this.initMachine(this._webgmePetriNet);
  };

  petriVizWidget.prototype._decorateMachine = function () {
    let self = this;
    self.updateTransition_Status();
  };
  /* * * * * * * * Visualizer event handlers * * * * * * * */

  petriVizWidget.prototype.onNodeClick = function (/*id*/) {
    // This currently changes the active node to the given id and
    // this is overridden in the controller.
  };

  petriVizWidget.prototype.onBackgroundDblClick = function () {
    this._el.append("<div>Background was double-clicked!!</div>");
  };

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  petriVizWidget.prototype.destroy = function () {};

  petriVizWidget.prototype.onActivate = function () {
    this._logger.debug("petriVizWidget has been activated");
  };

  petriVizWidget.prototype.onDeactivate = function () {
    this._logger.debug("petriVizWidget has been deactivated");
  };

  return petriVizWidget;
});
